#This pipeline will create resource group and needed resources within
#Then checkout, restore, build and deploy a Function App

trigger:
  none
#  branches:
#    include:
#      - main
#  paths:
#    include:
#      - .ado
#      - .azure
      
variables:
  - group: 'Production Variables'
  
  - name: templateFile
    value: '.azure/bicep/Environment.bicep'

  - name: azureServiceConnection
    value: 'azureConnection'

  - name: appServicePlanName
    value: 'appplan$(suffix)'
  
  - name: appName
    value: 'functions$(suffix)'

  - name: websiteName
    value: 'web$(suffix)'

  - name: storageAccountName
    value: 'storage$(suffix)'
  
  - name: keyVaultName
    value: 'keyVault$(suffix)'

pool:
  name: 'Minecraft server'
  vmImage: 'ubuntu-latest'

stages:
  - stage:
    #Setup or update environment
    displayName: Create or update environment
    variables:
      - group: 'Production Variables'
    jobs:
      - job:
#        condition: false #prevents this stage to run
        steps:
#          - checkout: none
          - task: AzureCLI@2
            displayName: Create or update the resource group
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az group create --location $(location) --name $(resourceGroupName)

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Create or update environment
            inputs:
              addSpnToEnvironment: true
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: '$(azureServiceConnection)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(resourceGroupName)'
              location: '$(location)'
              templateLocation: 'Linked artifact'
              csmFile: '$(templateFile)'
              overrideParameters: ' -appServicePlanName $(appServicePlanName) -appName $(appName) -location $(location) -storageAccountName $(storageAccountName) -websiteName $(websiteName) -keyVaultName $(keyVaultName)'
              deploymentMode: 'Incremental'
              deploymentOutputs: 'asp-json'
          
          - task: AzureCLI@2
            displayName: 'Get Storage Account Connection String'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                storageConnectionString=$(az storage account show-connection-string --name $(storageAccountName) --resource-group $(resourceGroupName) --output tsv --query 'connectionString' -azureSubscriptionObjectId $(azureServiceConnection).id)
                echo "##vso[task.setvariable variable=storageConnectionString]$storageConnectionString"

          - task: AzureKeyVault@2
            displayName: 'Store Storage Account Connection String in Key Vault'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              KeyVaultName: '$(keyVaultName)'
              SecretsFilter: 'storageConnectionString'
              RunAsPreJob: false
#              ReplaceExisting: true
